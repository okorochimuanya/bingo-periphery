/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumber, Signer, utils } from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface IRewardDistributionInterface extends utils.Interface {
  functions: {};

  events: {
    "NewReward(address,uint256,address,uint256)": EventFragment;
    "RewardDistributed(address,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardDistributed"): EventFragment;
}

export interface NewRewardEventObject {
  newReward: string;
  newRewardStartId: BigNumber;
  oldReward: string;
  oldRewardDistributed: BigNumber;
}
export type NewRewardEvent = TypedEvent<
  [string, BigNumber, string, BigNumber],
  NewRewardEventObject
>;

export type NewRewardEventFilter = TypedEventFilter<NewRewardEvent>;

export interface RewardDistributedEventObject {
  reward: string;
  id: BigNumber;
  to: string;
}
export type RewardDistributedEvent = TypedEvent<
  [string, BigNumber, string],
  RewardDistributedEventObject
>;

export type RewardDistributedEventFilter =
  TypedEventFilter<RewardDistributedEvent>;

export interface IRewardDistribution extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IRewardDistributionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "NewReward(address,uint256,address,uint256)"(
      newReward?: PromiseOrValue<string> | null,
      newRewardStartId?: null,
      oldReward?: PromiseOrValue<string> | null,
      oldRewardDistributed?: null
    ): NewRewardEventFilter;
    NewReward(
      newReward?: PromiseOrValue<string> | null,
      newRewardStartId?: null,
      oldReward?: PromiseOrValue<string> | null,
      oldRewardDistributed?: null
    ): NewRewardEventFilter;

    "RewardDistributed(address,uint256,address)"(
      reward?: PromiseOrValue<string> | null,
      id?: null,
      to?: PromiseOrValue<string> | null
    ): RewardDistributedEventFilter;
    RewardDistributed(
      reward?: PromiseOrValue<string> | null,
      id?: null,
      to?: PromiseOrValue<string> | null
    ): RewardDistributedEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
