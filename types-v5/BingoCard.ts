/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface BingoCardInterface extends utils.Interface {
  functions: {
    "_decodeMarkedSpacesBySettings(uint256,uint8,uint8)": FunctionFragment;
    "addMinter(address)": FunctionFragment;
    "bindCardGame(uint256,address,uint256)": FunctionFragment;
    "calculateMatchedLineCounts(uint8[][],uint256)": FunctionFragment;
    "cardSignaturePrefix()": FunctionFragment;
    "columns()": FunctionFragment;
    "decodeCardNumbers(bytes)": FunctionFragment;
    "decodeMarkedSpaces(uint256)": FunctionFragment;
    "decodeSelectedNumbers(uint256)": FunctionFragment;
    "editUnplayedCard(uint256,bytes)": FunctionFragment;
    "encodeCardNumbers(uint8[][])": FunctionFragment;
    "encodeMarkedSpaces(uint8[2][])": FunctionFragment;
    "encodeSelectedNumbers(uint8[])": FunctionFragment;
    "estimateMatchedLines(uint8[][],uint8[])": FunctionFragment;
    "freeSpaces()": FunctionFragment;
    "getCardGame(uint256)": FunctionFragment;
    "getCardNumbers(uint256)": FunctionFragment;
    "isValidCardNumbers(uint8[][])": FunctionFragment;
    "lines()": FunctionFragment;
    "matchedLines(uint256)": FunctionFragment;
    "mint(address,uint256,bytes)": FunctionFragment;
    "removeMinter(address)": FunctionFragment;
    "restrictions()": FunctionFragment;
    "reveal(uint256,bytes,bytes,uint8[][])": FunctionFragment;
    "rows()": FunctionFragment;
    "setBindingGame(address)": FunctionFragment;
    "setFreeSpaces(uint8[2][])": FunctionFragment;
    "setLines(uint8[2][][])": FunctionFragment;
    "setRestrictions(uint8[2][][])": FunctionFragment;
    "verifySigner(uint256,bytes,uint8[][],address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_decodeMarkedSpacesBySettings"
      | "addMinter"
      | "bindCardGame"
      | "calculateMatchedLineCounts"
      | "cardSignaturePrefix"
      | "columns"
      | "decodeCardNumbers"
      | "decodeMarkedSpaces"
      | "decodeSelectedNumbers"
      | "editUnplayedCard"
      | "encodeCardNumbers"
      | "encodeMarkedSpaces"
      | "encodeSelectedNumbers"
      | "estimateMatchedLines"
      | "freeSpaces"
      | "getCardGame"
      | "getCardNumbers"
      | "isValidCardNumbers"
      | "lines"
      | "matchedLines"
      | "mint"
      | "removeMinter"
      | "restrictions"
      | "reveal"
      | "rows"
      | "setBindingGame"
      | "setFreeSpaces"
      | "setLines"
      | "setRestrictions"
      | "verifySigner"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_decodeMarkedSpacesBySettings",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addMinter",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "bindCardGame",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateMatchedLineCounts",
    values: [PromiseOrValue<BigNumberish>[][], PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "cardSignaturePrefix",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "columns", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decodeCardNumbers",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "decodeMarkedSpaces",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "decodeSelectedNumbers",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "editUnplayedCard",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeCardNumbers",
    values: [PromiseOrValue<BigNumberish>[][]]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeMarkedSpaces",
    values: [[PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>][]]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeSelectedNumbers",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "estimateMatchedLines",
    values: [PromiseOrValue<BigNumberish>[][], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "freeSpaces",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCardGame",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCardNumbers",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidCardNumbers",
    values: [PromiseOrValue<BigNumberish>[][]]
  ): string;
  encodeFunctionData(functionFragment: "lines", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "matchedLines",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeMinter",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "restrictions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reveal",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>[][]
    ]
  ): string;
  encodeFunctionData(functionFragment: "rows", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setBindingGame",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFreeSpaces",
    values: [[PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>][]]
  ): string;
  encodeFunctionData(
    functionFragment: "setLines",
    values: [[PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>][][]]
  ): string;
  encodeFunctionData(
    functionFragment: "setRestrictions",
    values: [[PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>][][]]
  ): string;
  encodeFunctionData(
    functionFragment: "verifySigner",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>[][],
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "_decodeMarkedSpacesBySettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addMinter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bindCardGame",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateMatchedLineCounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cardSignaturePrefix",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "columns", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decodeCardNumbers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decodeMarkedSpaces",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decodeSelectedNumbers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "editUnplayedCard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encodeCardNumbers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encodeMarkedSpaces",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encodeSelectedNumbers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateMatchedLines",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "freeSpaces", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCardGame",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCardNumbers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidCardNumbers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lines", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "matchedLines",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeMinter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "restrictions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reveal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rows", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBindingGame",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFreeSpaces",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setLines", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRestrictions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifySigner",
    data: BytesLike
  ): Result;

  events: {
    "Revealed(uint256,address,address,uint8[][])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Revealed"): EventFragment;
}

export interface RevealedEventObject {
  cardId: BigNumber;
  revealer: string;
  signer: string;
  numbers: number[][];
}
export type RevealedEvent = TypedEvent<
  [BigNumber, string, string, number[][]],
  RevealedEventObject
>;

export type RevealedEventFilter = TypedEventFilter<RevealedEvent>;

export interface BingoCard extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BingoCardInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _decodeMarkedSpacesBySettings(
      encodedMarkedSpaces: PromiseOrValue<BigNumberish>,
      gridRows: PromiseOrValue<BigNumberish>,
      gridColumns: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[[number, number][]] & { markedSpaces: [number, number][] }>;

    addMinter(
      minter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bindCardGame(
      cardId: PromiseOrValue<BigNumberish>,
      gameContract: PromiseOrValue<string>,
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    calculateMatchedLineCounts(
      cardNumbers: PromiseOrValue<BigNumberish>[][],
      selectedNumbers: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number] & { lineCounts: number }>;

    cardSignaturePrefix(overrides?: CallOverrides): Promise<[string]>;

    columns(overrides?: CallOverrides): Promise<[number]>;

    decodeCardNumbers(
      encodedCardNumbers: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[number[][]] & { cardNumbers: number[][] }>;

    decodeMarkedSpaces(
      encodedMarkedSpaces: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[[number, number][]] & { markedSpaces: [number, number][] }>;

    decodeSelectedNumbers(
      encoded: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number[]] & { selectedNumbers: number[] }>;

    editUnplayedCard(
      cardId: PromiseOrValue<BigNumberish>,
      encryptedContent: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    encodeCardNumbers(
      cardNumbers: PromiseOrValue<BigNumberish>[][],
      overrides?: CallOverrides
    ): Promise<[string] & { encodedCardNumbers: string }>;

    encodeMarkedSpaces(
      markedSpaces: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ][],
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { encodedMarkedSpaces: BigNumber }>;

    encodeSelectedNumbers(
      selectedNumbers: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { encoded: BigNumber }>;

    estimateMatchedLines(
      cardNumbers: PromiseOrValue<BigNumberish>[][],
      selectedNumbers: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[number] & { lineCounts: number }>;

    freeSpaces(overrides?: CallOverrides): Promise<[[number, number][]]>;

    getCardGame(
      cardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { gameContract: string; gameId: BigNumber }
    >;

    getCardNumbers(
      cardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number[][]]>;

    isValidCardNumbers(
      nums: PromiseOrValue<BigNumberish>[][],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lines(overrides?: CallOverrides): Promise<[[number, number][][]]>;

    matchedLines(
      cardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number] & { lineCount: number }>;

    mint(
      to: PromiseOrValue<string>,
      gameId: PromiseOrValue<BigNumberish>,
      encryptedContent: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeMinter(
      minter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    restrictions(overrides?: CallOverrides): Promise<[[number, number][][]]>;

    reveal(
      cardId: PromiseOrValue<BigNumberish>,
      gameLabel: PromiseOrValue<BytesLike>,
      signedGameLabel: PromiseOrValue<BytesLike>,
      cardNumbers: PromiseOrValue<BigNumberish>[][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rows(overrides?: CallOverrides): Promise<[number]>;

    setBindingGame(
      gameAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFreeSpaces(
      freeSpacePositions: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLines(
      validLines: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ][][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRestrictions(
      spaceNumberRestrictions: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ][][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    verifySigner(
      cardId: PromiseOrValue<BigNumberish>,
      salt: PromiseOrValue<BytesLike>,
      cardNumbers: PromiseOrValue<BigNumberish>[][],
      signer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  _decodeMarkedSpacesBySettings(
    encodedMarkedSpaces: PromiseOrValue<BigNumberish>,
    gridRows: PromiseOrValue<BigNumberish>,
    gridColumns: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[number, number][]>;

  addMinter(
    minter: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bindCardGame(
    cardId: PromiseOrValue<BigNumberish>,
    gameContract: PromiseOrValue<string>,
    gameId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  calculateMatchedLineCounts(
    cardNumbers: PromiseOrValue<BigNumberish>[][],
    selectedNumbers: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  cardSignaturePrefix(overrides?: CallOverrides): Promise<string>;

  columns(overrides?: CallOverrides): Promise<number>;

  decodeCardNumbers(
    encodedCardNumbers: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<number[][]>;

  decodeMarkedSpaces(
    encodedMarkedSpaces: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[number, number][]>;

  decodeSelectedNumbers(
    encoded: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number[]>;

  editUnplayedCard(
    cardId: PromiseOrValue<BigNumberish>,
    encryptedContent: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  encodeCardNumbers(
    cardNumbers: PromiseOrValue<BigNumberish>[][],
    overrides?: CallOverrides
  ): Promise<string>;

  encodeMarkedSpaces(
    markedSpaces: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ][],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  encodeSelectedNumbers(
    selectedNumbers: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  estimateMatchedLines(
    cardNumbers: PromiseOrValue<BigNumberish>[][],
    selectedNumbers: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<number>;

  freeSpaces(overrides?: CallOverrides): Promise<[number, number][]>;

  getCardGame(
    cardId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { gameContract: string; gameId: BigNumber }>;

  getCardNumbers(
    cardId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number[][]>;

  isValidCardNumbers(
    nums: PromiseOrValue<BigNumberish>[][],
    overrides?: CallOverrides
  ): Promise<boolean>;

  lines(overrides?: CallOverrides): Promise<[number, number][][]>;

  matchedLines(
    cardId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  mint(
    to: PromiseOrValue<string>,
    gameId: PromiseOrValue<BigNumberish>,
    encryptedContent: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeMinter(
    minter: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  restrictions(overrides?: CallOverrides): Promise<[number, number][][]>;

  reveal(
    cardId: PromiseOrValue<BigNumberish>,
    gameLabel: PromiseOrValue<BytesLike>,
    signedGameLabel: PromiseOrValue<BytesLike>,
    cardNumbers: PromiseOrValue<BigNumberish>[][],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rows(overrides?: CallOverrides): Promise<number>;

  setBindingGame(
    gameAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFreeSpaces(
    freeSpacePositions: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ][],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLines(
    validLines: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ][][],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRestrictions(
    spaceNumberRestrictions: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ][][],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  verifySigner(
    cardId: PromiseOrValue<BigNumberish>,
    salt: PromiseOrValue<BytesLike>,
    cardNumbers: PromiseOrValue<BigNumberish>[][],
    signer: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    _decodeMarkedSpacesBySettings(
      encodedMarkedSpaces: PromiseOrValue<BigNumberish>,
      gridRows: PromiseOrValue<BigNumberish>,
      gridColumns: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number, number][]>;

    addMinter(
      minter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    bindCardGame(
      cardId: PromiseOrValue<BigNumberish>,
      gameContract: PromiseOrValue<string>,
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    calculateMatchedLineCounts(
      cardNumbers: PromiseOrValue<BigNumberish>[][],
      selectedNumbers: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    cardSignaturePrefix(overrides?: CallOverrides): Promise<string>;

    columns(overrides?: CallOverrides): Promise<number>;

    decodeCardNumbers(
      encodedCardNumbers: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<number[][]>;

    decodeMarkedSpaces(
      encodedMarkedSpaces: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number, number][]>;

    decodeSelectedNumbers(
      encoded: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number[]>;

    editUnplayedCard(
      cardId: PromiseOrValue<BigNumberish>,
      encryptedContent: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    encodeCardNumbers(
      cardNumbers: PromiseOrValue<BigNumberish>[][],
      overrides?: CallOverrides
    ): Promise<string>;

    encodeMarkedSpaces(
      markedSpaces: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ][],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    encodeSelectedNumbers(
      selectedNumbers: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    estimateMatchedLines(
      cardNumbers: PromiseOrValue<BigNumberish>[][],
      selectedNumbers: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<number>;

    freeSpaces(overrides?: CallOverrides): Promise<[number, number][]>;

    getCardGame(
      cardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { gameContract: string; gameId: BigNumber }
    >;

    getCardNumbers(
      cardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number[][]>;

    isValidCardNumbers(
      nums: PromiseOrValue<BigNumberish>[][],
      overrides?: CallOverrides
    ): Promise<boolean>;

    lines(overrides?: CallOverrides): Promise<[number, number][][]>;

    matchedLines(
      cardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    mint(
      to: PromiseOrValue<string>,
      gameId: PromiseOrValue<BigNumberish>,
      encryptedContent: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeMinter(
      minter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    restrictions(overrides?: CallOverrides): Promise<[number, number][][]>;

    reveal(
      cardId: PromiseOrValue<BigNumberish>,
      gameLabel: PromiseOrValue<BytesLike>,
      signedGameLabel: PromiseOrValue<BytesLike>,
      cardNumbers: PromiseOrValue<BigNumberish>[][],
      overrides?: CallOverrides
    ): Promise<void>;

    rows(overrides?: CallOverrides): Promise<number>;

    setBindingGame(
      gameAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFreeSpaces(
      freeSpacePositions: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ][],
      overrides?: CallOverrides
    ): Promise<void>;

    setLines(
      validLines: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ][][],
      overrides?: CallOverrides
    ): Promise<void>;

    setRestrictions(
      spaceNumberRestrictions: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ][][],
      overrides?: CallOverrides
    ): Promise<void>;

    verifySigner(
      cardId: PromiseOrValue<BigNumberish>,
      salt: PromiseOrValue<BytesLike>,
      cardNumbers: PromiseOrValue<BigNumberish>[][],
      signer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "Revealed(uint256,address,address,uint8[][])"(
      cardId?: PromiseOrValue<BigNumberish> | null,
      revealer?: PromiseOrValue<string> | null,
      signer?: PromiseOrValue<string> | null,
      numbers?: null
    ): RevealedEventFilter;
    Revealed(
      cardId?: PromiseOrValue<BigNumberish> | null,
      revealer?: PromiseOrValue<string> | null,
      signer?: PromiseOrValue<string> | null,
      numbers?: null
    ): RevealedEventFilter;
  };

  estimateGas: {
    _decodeMarkedSpacesBySettings(
      encodedMarkedSpaces: PromiseOrValue<BigNumberish>,
      gridRows: PromiseOrValue<BigNumberish>,
      gridColumns: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addMinter(
      minter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bindCardGame(
      cardId: PromiseOrValue<BigNumberish>,
      gameContract: PromiseOrValue<string>,
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    calculateMatchedLineCounts(
      cardNumbers: PromiseOrValue<BigNumberish>[][],
      selectedNumbers: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cardSignaturePrefix(overrides?: CallOverrides): Promise<BigNumber>;

    columns(overrides?: CallOverrides): Promise<BigNumber>;

    decodeCardNumbers(
      encodedCardNumbers: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decodeMarkedSpaces(
      encodedMarkedSpaces: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decodeSelectedNumbers(
      encoded: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    editUnplayedCard(
      cardId: PromiseOrValue<BigNumberish>,
      encryptedContent: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    encodeCardNumbers(
      cardNumbers: PromiseOrValue<BigNumberish>[][],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    encodeMarkedSpaces(
      markedSpaces: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ][],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    encodeSelectedNumbers(
      selectedNumbers: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    estimateMatchedLines(
      cardNumbers: PromiseOrValue<BigNumberish>[][],
      selectedNumbers: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    freeSpaces(overrides?: CallOverrides): Promise<BigNumber>;

    getCardGame(
      cardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCardNumbers(
      cardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValidCardNumbers(
      nums: PromiseOrValue<BigNumberish>[][],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lines(overrides?: CallOverrides): Promise<BigNumber>;

    matchedLines(
      cardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      to: PromiseOrValue<string>,
      gameId: PromiseOrValue<BigNumberish>,
      encryptedContent: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeMinter(
      minter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    restrictions(overrides?: CallOverrides): Promise<BigNumber>;

    reveal(
      cardId: PromiseOrValue<BigNumberish>,
      gameLabel: PromiseOrValue<BytesLike>,
      signedGameLabel: PromiseOrValue<BytesLike>,
      cardNumbers: PromiseOrValue<BigNumberish>[][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rows(overrides?: CallOverrides): Promise<BigNumber>;

    setBindingGame(
      gameAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFreeSpaces(
      freeSpacePositions: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLines(
      validLines: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ][][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRestrictions(
      spaceNumberRestrictions: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ][][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    verifySigner(
      cardId: PromiseOrValue<BigNumberish>,
      salt: PromiseOrValue<BytesLike>,
      cardNumbers: PromiseOrValue<BigNumberish>[][],
      signer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _decodeMarkedSpacesBySettings(
      encodedMarkedSpaces: PromiseOrValue<BigNumberish>,
      gridRows: PromiseOrValue<BigNumberish>,
      gridColumns: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addMinter(
      minter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bindCardGame(
      cardId: PromiseOrValue<BigNumberish>,
      gameContract: PromiseOrValue<string>,
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    calculateMatchedLineCounts(
      cardNumbers: PromiseOrValue<BigNumberish>[][],
      selectedNumbers: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cardSignaturePrefix(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    columns(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decodeCardNumbers(
      encodedCardNumbers: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decodeMarkedSpaces(
      encodedMarkedSpaces: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decodeSelectedNumbers(
      encoded: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    editUnplayedCard(
      cardId: PromiseOrValue<BigNumberish>,
      encryptedContent: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    encodeCardNumbers(
      cardNumbers: PromiseOrValue<BigNumberish>[][],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    encodeMarkedSpaces(
      markedSpaces: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ][],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    encodeSelectedNumbers(
      selectedNumbers: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    estimateMatchedLines(
      cardNumbers: PromiseOrValue<BigNumberish>[][],
      selectedNumbers: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    freeSpaces(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCardGame(
      cardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCardNumbers(
      cardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidCardNumbers(
      nums: PromiseOrValue<BigNumberish>[][],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lines(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    matchedLines(
      cardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      to: PromiseOrValue<string>,
      gameId: PromiseOrValue<BigNumberish>,
      encryptedContent: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeMinter(
      minter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    restrictions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reveal(
      cardId: PromiseOrValue<BigNumberish>,
      gameLabel: PromiseOrValue<BytesLike>,
      signedGameLabel: PromiseOrValue<BytesLike>,
      cardNumbers: PromiseOrValue<BigNumberish>[][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rows(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setBindingGame(
      gameAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFreeSpaces(
      freeSpacePositions: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLines(
      validLines: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ][][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRestrictions(
      spaceNumberRestrictions: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ][][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    verifySigner(
      cardId: PromiseOrValue<BigNumberish>,
      salt: PromiseOrValue<BytesLike>,
      cardNumbers: PromiseOrValue<BigNumberish>[][],
      signer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
