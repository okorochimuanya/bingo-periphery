/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface ZkBingoCardInterface extends utils.Interface {
  functions: {
    "_decodeMarkedSpacesBySettings(uint256,uint8,uint8)": FunctionFragment;
    "addMinter(address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "bindCardGame(uint256,address,uint256)": FunctionFragment;
    "bindGame()": FunctionFragment;
    "calculateMatchedLineCounts(uint8[][],uint256)": FunctionFragment;
    "cardSignaturePrefix()": FunctionFragment;
    "columns()": FunctionFragment;
    "decodeCardNumbers(bytes)": FunctionFragment;
    "decodeMarkedSpaces(uint256)": FunctionFragment;
    "decodeSelectedNumbers(uint256)": FunctionFragment;
    "editUnplayedCard(uint256,bytes)": FunctionFragment;
    "encodeCardNumbers(uint8[][])": FunctionFragment;
    "encodeMarkedSpaces(uint8[2][])": FunctionFragment;
    "encodeSelectedNumbers(uint8[])": FunctionFragment;
    "estimateMatchedLines(uint8[][],uint8[])": FunctionFragment;
    "freeSpaces()": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getCardGame(uint256)": FunctionFragment;
    "getCardNumbers(uint256)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "lines()": FunctionFragment;
    "matchedLines(uint256)": FunctionFragment;
    "mint(address,uint256,bytes)": FunctionFragment;
    "minters(address)": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "removeMinter(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "restrictions()": FunctionFragment;
    "reveal(uint256,bytes,bytes,uint8[][])": FunctionFragment;
    "rows()": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,bytes)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setBindingGame(address)": FunctionFragment;
    "setFreeSpaces(uint8[2][])": FunctionFragment;
    "setLines(uint8[2][][])": FunctionFragment;
    "setRestrictions(uint8[2][][])": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenByIndex(uint256)": FunctionFragment;
    "tokenOfOwnerByIndex(address,uint256)": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "verifySigner(uint256,bytes32,uint8[][],address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_decodeMarkedSpacesBySettings"
      | "addMinter"
      | "approve"
      | "balanceOf"
      | "bindCardGame"
      | "bindGame"
      | "calculateMatchedLineCounts"
      | "cardSignaturePrefix"
      | "columns"
      | "decodeCardNumbers"
      | "decodeMarkedSpaces"
      | "decodeSelectedNumbers"
      | "editUnplayedCard"
      | "encodeCardNumbers"
      | "encodeMarkedSpaces"
      | "encodeSelectedNumbers"
      | "estimateMatchedLines"
      | "freeSpaces"
      | "getApproved"
      | "getCardGame"
      | "getCardNumbers"
      | "isApprovedForAll"
      | "lines"
      | "matchedLines"
      | "mint"
      | "minters"
      | "name"
      | "owner"
      | "ownerOf"
      | "removeMinter"
      | "renounceOwnership"
      | "restrictions"
      | "reveal"
      | "rows"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "setBindingGame"
      | "setFreeSpaces"
      | "setLines"
      | "setRestrictions"
      | "supportsInterface"
      | "symbol"
      | "tokenByIndex"
      | "tokenOfOwnerByIndex"
      | "tokenURI"
      | "totalSupply"
      | "transferFrom"
      | "transferOwnership"
      | "verifySigner"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_decodeMarkedSpacesBySettings",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addMinter",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "bindCardGame",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "bindGame", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "calculateMatchedLineCounts",
    values: [PromiseOrValue<BigNumberish>[][], PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "cardSignaturePrefix",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "columns", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decodeCardNumbers",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "decodeMarkedSpaces",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "decodeSelectedNumbers",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "editUnplayedCard",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeCardNumbers",
    values: [PromiseOrValue<BigNumberish>[][]]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeMarkedSpaces",
    values: [[PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>][]]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeSelectedNumbers",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "estimateMatchedLines",
    values: [PromiseOrValue<BigNumberish>[][], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "freeSpaces",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCardGame",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCardNumbers",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "lines", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "matchedLines",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "minters",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeMinter",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "restrictions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reveal",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>[][]
    ]
  ): string;
  encodeFunctionData(functionFragment: "rows", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBindingGame",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFreeSpaces",
    values: [[PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>][]]
  ): string;
  encodeFunctionData(
    functionFragment: "setLines",
    values: [[PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>][][]]
  ): string;
  encodeFunctionData(
    functionFragment: "setRestrictions",
    values: [[PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>][][]]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenByIndex",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "verifySigner",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>[][],
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "_decodeMarkedSpacesBySettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addMinter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bindCardGame",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bindGame", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateMatchedLineCounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cardSignaturePrefix",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "columns", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decodeCardNumbers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decodeMarkedSpaces",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decodeSelectedNumbers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "editUnplayedCard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encodeCardNumbers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encodeMarkedSpaces",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encodeSelectedNumbers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateMatchedLines",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "freeSpaces", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCardGame",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCardNumbers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lines", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "matchedLines",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minters", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeMinter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "restrictions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reveal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rows", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBindingGame",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFreeSpaces",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setLines", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRestrictions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifySigner",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Revealed(uint256,address,address,uint8[][])": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Revealed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  approved: string;
  tokenId: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ApprovalForAllEventObject {
  owner: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RevealedEventObject {
  cardId: BigNumber;
  revealer: string;
  signer: string;
  numbers: number[][];
}
export type RevealedEvent = TypedEvent<
  [BigNumber, string, string, number[][]],
  RevealedEventObject
>;

export type RevealedEventFilter = TypedEventFilter<RevealedEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  tokenId: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface ZkBingoCard extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ZkBingoCardInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _decodeMarkedSpacesBySettings(
      encodedMarkedSpaces: PromiseOrValue<BigNumberish>,
      gridRows: PromiseOrValue<BigNumberish>,
      gridColumns: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[[number, number][]] & { markedSpaces: [number, number][] }>;

    addMinter(
      minter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    bindCardGame(
      tokenId: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bindGame(overrides?: CallOverrides): Promise<[string]>;

    calculateMatchedLineCounts(
      cardNumbers: PromiseOrValue<BigNumberish>[][],
      selectedNumbers: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number] & { lineCounts: number }>;

    cardSignaturePrefix(overrides?: CallOverrides): Promise<[string]>;

    columns(overrides?: CallOverrides): Promise<[number]>;

    decodeCardNumbers(
      encodedCardNumbers: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[number[][]] & { cardNumbers: number[][] }>;

    decodeMarkedSpaces(
      encodedMarkedSpaces: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[[number, number][]] & { markedSpaces: [number, number][] }>;

    decodeSelectedNumbers(
      encoded: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number[]] & { selectedNumbers: number[] }>;

    editUnplayedCard(
      tokenId: PromiseOrValue<BigNumberish>,
      encryptedContent: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    encodeCardNumbers(
      cardNumbers: PromiseOrValue<BigNumberish>[][],
      overrides?: CallOverrides
    ): Promise<[string] & { encodedCardNumbers: string }>;

    encodeMarkedSpaces(
      markedSpaces: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ][],
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { encodedMarkedSpaces: BigNumber }>;

    encodeSelectedNumbers(
      selectedNumbers: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { encoded: BigNumber }>;

    estimateMatchedLines(
      cardNumbers: PromiseOrValue<BigNumberish>[][],
      selectedNumbers: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[number] & { lineCounts: number }>;

    freeSpaces(overrides?: CallOverrides): Promise<[[number, number][]]>;

    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getCardGame(
      cardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { gameContract: string; gameId: BigNumber }
    >;

    getCardNumbers(
      cardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number[][]]>;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lines(overrides?: CallOverrides): Promise<[[number, number][][]]>;

    matchedLines(
      cardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number] & { lineCount: number }>;

    mint(
      to: PromiseOrValue<string>,
      gameId: PromiseOrValue<BigNumberish>,
      encryptedContent: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    minters(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    removeMinter(
      minter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    restrictions(overrides?: CallOverrides): Promise<[[number, number][][]]>;

    reveal(
      tokenId: PromiseOrValue<BigNumberish>,
      gameLabel: PromiseOrValue<BytesLike>,
      signedGameLabel: PromiseOrValue<BytesLike>,
      cardNumbers: PromiseOrValue<BigNumberish>[][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rows(overrides?: CallOverrides): Promise<[number]>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBindingGame(
      _game: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFreeSpaces(
      freeSpaces_: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLines(
      lines_: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>][][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRestrictions(
      restrictions_: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ][][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenByIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenOfOwnerByIndex(
      owner: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    verifySigner(
      cardId: PromiseOrValue<BigNumberish>,
      salt: PromiseOrValue<BytesLike>,
      cardNumbers: PromiseOrValue<BigNumberish>[][],
      signer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  _decodeMarkedSpacesBySettings(
    encodedMarkedSpaces: PromiseOrValue<BigNumberish>,
    gridRows: PromiseOrValue<BigNumberish>,
    gridColumns: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[number, number][]>;

  addMinter(
    minter: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approve(
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  bindCardGame(
    tokenId: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    gameId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bindGame(overrides?: CallOverrides): Promise<string>;

  calculateMatchedLineCounts(
    cardNumbers: PromiseOrValue<BigNumberish>[][],
    selectedNumbers: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  cardSignaturePrefix(overrides?: CallOverrides): Promise<string>;

  columns(overrides?: CallOverrides): Promise<number>;

  decodeCardNumbers(
    encodedCardNumbers: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<number[][]>;

  decodeMarkedSpaces(
    encodedMarkedSpaces: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[number, number][]>;

  decodeSelectedNumbers(
    encoded: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number[]>;

  editUnplayedCard(
    tokenId: PromiseOrValue<BigNumberish>,
    encryptedContent: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  encodeCardNumbers(
    cardNumbers: PromiseOrValue<BigNumberish>[][],
    overrides?: CallOverrides
  ): Promise<string>;

  encodeMarkedSpaces(
    markedSpaces: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ][],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  encodeSelectedNumbers(
    selectedNumbers: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  estimateMatchedLines(
    cardNumbers: PromiseOrValue<BigNumberish>[][],
    selectedNumbers: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<number>;

  freeSpaces(overrides?: CallOverrides): Promise<[number, number][]>;

  getApproved(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getCardGame(
    cardId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { gameContract: string; gameId: BigNumber }>;

  getCardNumbers(
    cardId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number[][]>;

  isApprovedForAll(
    owner: PromiseOrValue<string>,
    operator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lines(overrides?: CallOverrides): Promise<[number, number][][]>;

  matchedLines(
    cardId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  mint(
    to: PromiseOrValue<string>,
    gameId: PromiseOrValue<BigNumberish>,
    encryptedContent: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  minters(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerOf(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  removeMinter(
    minter: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  restrictions(overrides?: CallOverrides): Promise<[number, number][][]>;

  reveal(
    tokenId: PromiseOrValue<BigNumberish>,
    gameLabel: PromiseOrValue<BytesLike>,
    signedGameLabel: PromiseOrValue<BytesLike>,
    cardNumbers: PromiseOrValue<BigNumberish>[][],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rows(overrides?: CallOverrides): Promise<number>;

  "safeTransferFrom(address,address,uint256)"(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: PromiseOrValue<string>,
    approved: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBindingGame(
    _game: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFreeSpaces(
    freeSpaces_: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>][],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLines(
    lines_: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>][][],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRestrictions(
    restrictions_: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ][][],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenByIndex(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenOfOwnerByIndex(
    owner: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenURI(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  verifySigner(
    cardId: PromiseOrValue<BigNumberish>,
    salt: PromiseOrValue<BytesLike>,
    cardNumbers: PromiseOrValue<BigNumberish>[][],
    signer: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    _decodeMarkedSpacesBySettings(
      encodedMarkedSpaces: PromiseOrValue<BigNumberish>,
      gridRows: PromiseOrValue<BigNumberish>,
      gridColumns: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number, number][]>;

    addMinter(
      minter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bindCardGame(
      tokenId: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    bindGame(overrides?: CallOverrides): Promise<string>;

    calculateMatchedLineCounts(
      cardNumbers: PromiseOrValue<BigNumberish>[][],
      selectedNumbers: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    cardSignaturePrefix(overrides?: CallOverrides): Promise<string>;

    columns(overrides?: CallOverrides): Promise<number>;

    decodeCardNumbers(
      encodedCardNumbers: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<number[][]>;

    decodeMarkedSpaces(
      encodedMarkedSpaces: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number, number][]>;

    decodeSelectedNumbers(
      encoded: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number[]>;

    editUnplayedCard(
      tokenId: PromiseOrValue<BigNumberish>,
      encryptedContent: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    encodeCardNumbers(
      cardNumbers: PromiseOrValue<BigNumberish>[][],
      overrides?: CallOverrides
    ): Promise<string>;

    encodeMarkedSpaces(
      markedSpaces: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ][],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    encodeSelectedNumbers(
      selectedNumbers: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    estimateMatchedLines(
      cardNumbers: PromiseOrValue<BigNumberish>[][],
      selectedNumbers: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<number>;

    freeSpaces(overrides?: CallOverrides): Promise<[number, number][]>;

    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getCardGame(
      cardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { gameContract: string; gameId: BigNumber }
    >;

    getCardNumbers(
      cardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number[][]>;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lines(overrides?: CallOverrides): Promise<[number, number][][]>;

    matchedLines(
      cardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    mint(
      to: PromiseOrValue<string>,
      gameId: PromiseOrValue<BigNumberish>,
      encryptedContent: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minters(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    removeMinter(
      minter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    restrictions(overrides?: CallOverrides): Promise<[number, number][][]>;

    reveal(
      tokenId: PromiseOrValue<BigNumberish>,
      gameLabel: PromiseOrValue<BytesLike>,
      signedGameLabel: PromiseOrValue<BytesLike>,
      cardNumbers: PromiseOrValue<BigNumberish>[][],
      overrides?: CallOverrides
    ): Promise<void>;

    rows(overrides?: CallOverrides): Promise<number>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBindingGame(
      _game: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFreeSpaces(
      freeSpaces_: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ][],
      overrides?: CallOverrides
    ): Promise<void>;

    setLines(
      lines_: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>][][],
      overrides?: CallOverrides
    ): Promise<void>;

    setRestrictions(
      restrictions_: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ][][],
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenByIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    verifySigner(
      cardId: PromiseOrValue<BigNumberish>,
      salt: PromiseOrValue<BytesLike>,
      cardNumbers: PromiseOrValue<BigNumberish>[][],
      signer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      approved?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      approved?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Revealed(uint256,address,address,uint8[][])"(
      cardId?: PromiseOrValue<BigNumberish> | null,
      revealer?: PromiseOrValue<string> | null,
      signer?: PromiseOrValue<string> | null,
      numbers?: null
    ): RevealedEventFilter;
    Revealed(
      cardId?: PromiseOrValue<BigNumberish> | null,
      revealer?: PromiseOrValue<string> | null,
      signer?: PromiseOrValue<string> | null,
      numbers?: null
    ): RevealedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): TransferEventFilter;
  };

  estimateGas: {
    _decodeMarkedSpacesBySettings(
      encodedMarkedSpaces: PromiseOrValue<BigNumberish>,
      gridRows: PromiseOrValue<BigNumberish>,
      gridColumns: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addMinter(
      minter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bindCardGame(
      tokenId: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bindGame(overrides?: CallOverrides): Promise<BigNumber>;

    calculateMatchedLineCounts(
      cardNumbers: PromiseOrValue<BigNumberish>[][],
      selectedNumbers: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cardSignaturePrefix(overrides?: CallOverrides): Promise<BigNumber>;

    columns(overrides?: CallOverrides): Promise<BigNumber>;

    decodeCardNumbers(
      encodedCardNumbers: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decodeMarkedSpaces(
      encodedMarkedSpaces: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decodeSelectedNumbers(
      encoded: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    editUnplayedCard(
      tokenId: PromiseOrValue<BigNumberish>,
      encryptedContent: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    encodeCardNumbers(
      cardNumbers: PromiseOrValue<BigNumberish>[][],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    encodeMarkedSpaces(
      markedSpaces: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ][],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    encodeSelectedNumbers(
      selectedNumbers: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    estimateMatchedLines(
      cardNumbers: PromiseOrValue<BigNumberish>[][],
      selectedNumbers: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    freeSpaces(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCardGame(
      cardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCardNumbers(
      cardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lines(overrides?: CallOverrides): Promise<BigNumber>;

    matchedLines(
      cardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      to: PromiseOrValue<string>,
      gameId: PromiseOrValue<BigNumberish>,
      encryptedContent: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    minters(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeMinter(
      minter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    restrictions(overrides?: CallOverrides): Promise<BigNumber>;

    reveal(
      tokenId: PromiseOrValue<BigNumberish>,
      gameLabel: PromiseOrValue<BytesLike>,
      signedGameLabel: PromiseOrValue<BytesLike>,
      cardNumbers: PromiseOrValue<BigNumberish>[][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rows(overrides?: CallOverrides): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBindingGame(
      _game: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFreeSpaces(
      freeSpaces_: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLines(
      lines_: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>][][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRestrictions(
      restrictions_: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ][][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenByIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    verifySigner(
      cardId: PromiseOrValue<BigNumberish>,
      salt: PromiseOrValue<BytesLike>,
      cardNumbers: PromiseOrValue<BigNumberish>[][],
      signer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _decodeMarkedSpacesBySettings(
      encodedMarkedSpaces: PromiseOrValue<BigNumberish>,
      gridRows: PromiseOrValue<BigNumberish>,
      gridColumns: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addMinter(
      minter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bindCardGame(
      tokenId: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bindGame(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateMatchedLineCounts(
      cardNumbers: PromiseOrValue<BigNumberish>[][],
      selectedNumbers: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cardSignaturePrefix(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    columns(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decodeCardNumbers(
      encodedCardNumbers: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decodeMarkedSpaces(
      encodedMarkedSpaces: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decodeSelectedNumbers(
      encoded: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    editUnplayedCard(
      tokenId: PromiseOrValue<BigNumberish>,
      encryptedContent: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    encodeCardNumbers(
      cardNumbers: PromiseOrValue<BigNumberish>[][],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    encodeMarkedSpaces(
      markedSpaces: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ][],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    encodeSelectedNumbers(
      selectedNumbers: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    estimateMatchedLines(
      cardNumbers: PromiseOrValue<BigNumberish>[][],
      selectedNumbers: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    freeSpaces(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCardGame(
      cardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCardNumbers(
      cardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lines(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    matchedLines(
      cardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      to: PromiseOrValue<string>,
      gameId: PromiseOrValue<BigNumberish>,
      encryptedContent: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    minters(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeMinter(
      minter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    restrictions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reveal(
      tokenId: PromiseOrValue<BigNumberish>,
      gameLabel: PromiseOrValue<BytesLike>,
      signedGameLabel: PromiseOrValue<BytesLike>,
      cardNumbers: PromiseOrValue<BigNumberish>[][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rows(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBindingGame(
      _game: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFreeSpaces(
      freeSpaces_: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLines(
      lines_: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>][][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRestrictions(
      restrictions_: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ][][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenByIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenOfOwnerByIndex(
      owner: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    verifySigner(
      cardId: PromiseOrValue<BigNumberish>,
      salt: PromiseOrValue<BytesLike>,
      cardNumbers: PromiseOrValue<BigNumberish>[][],
      signer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
