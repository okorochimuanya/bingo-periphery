/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IUserCenter {
  export type StatisticStruct = { count: BigNumberish; total: BigNumberish };

  export type StatisticStructOutput = [count: bigint, total: bigint] & {
    count: bigint;
    total: bigint;
  };
}

export interface UserCenterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "games"
      | "join"
      | "joinedCounts"
      | "partner"
      | "players"
      | "win"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "games",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "join",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "joinedCounts",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "partner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "players",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "win",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "games", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "join", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "joinedCounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "partner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "players", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "win", data: BytesLike): Result;
}

export interface UserCenter extends BaseContract {
  connect(runner?: ContractRunner | null): UserCenter;
  waitForDeployment(): Promise<this>;

  interface: UserCenterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  games: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [
      [IUserCenter.StatisticStructOutput, IUserCenter.StatisticStructOutput] & {
        joined: IUserCenter.StatisticStructOutput;
        won: IUserCenter.StatisticStructOutput;
      }
    ],
    "view"
  >;

  join: TypedContractMethod<
    [user: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  joinedCounts: TypedContractMethod<
    [game: AddressLike, user: AddressLike],
    [bigint],
    "view"
  >;

  partner: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  players: TypedContractMethod<
    [arg0: AddressLike],
    [
      [IUserCenter.StatisticStructOutput, IUserCenter.StatisticStructOutput] & {
        joined: IUserCenter.StatisticStructOutput;
        won: IUserCenter.StatisticStructOutput;
      }
    ],
    "view"
  >;

  win: TypedContractMethod<
    [user: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "games"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [
      [IUserCenter.StatisticStructOutput, IUserCenter.StatisticStructOutput] & {
        joined: IUserCenter.StatisticStructOutput;
        won: IUserCenter.StatisticStructOutput;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "join"
  ): TypedContractMethod<
    [user: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "joinedCounts"
  ): TypedContractMethod<
    [game: AddressLike, user: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "partner"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "players"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [IUserCenter.StatisticStructOutput, IUserCenter.StatisticStructOutput] & {
        joined: IUserCenter.StatisticStructOutput;
        won: IUserCenter.StatisticStructOutput;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "win"
  ): TypedContractMethod<
    [user: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  filters: {};
}
