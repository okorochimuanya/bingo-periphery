/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface BingoCardInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "_decodeMarkedSpacesBySettings"
      | "addMinter"
      | "bindCardGame"
      | "calculateMatchedLineCounts"
      | "columns"
      | "decodeCardNumbers"
      | "decodeMarkedSpaces"
      | "decodeSelectedNumbers"
      | "editUnplayedCard"
      | "encodeCardNumbers"
      | "encodeMarkedSpaces"
      | "encodeSelectedNumbers"
      | "estimateMatchedLines"
      | "freeSpaces"
      | "getCardGame"
      | "getCardNumbers"
      | "lines"
      | "matchedLines"
      | "mint"
      | "removeMinter"
      | "restrictions"
      | "reveal"
      | "rows"
      | "setBindingGame"
      | "setFreeSpaces"
      | "setLines"
      | "setRestrictions"
      | "verifySigner"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Revealed"): EventFragment;

  encodeFunctionData(
    functionFragment: "_decodeMarkedSpacesBySettings",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addMinter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "bindCardGame",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateMatchedLineCounts",
    values: [BigNumberish[][], BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "columns", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decodeCardNumbers",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "decodeMarkedSpaces",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "decodeSelectedNumbers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "editUnplayedCard",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeCardNumbers",
    values: [BigNumberish[][]]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeMarkedSpaces",
    values: [[BigNumberish, BigNumberish][]]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeSelectedNumbers",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "estimateMatchedLines",
    values: [BigNumberish[][], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "freeSpaces",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCardGame",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCardNumbers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "lines", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "matchedLines",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeMinter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "restrictions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reveal",
    values: [BigNumberish, BytesLike, BytesLike, BigNumberish[][]]
  ): string;
  encodeFunctionData(functionFragment: "rows", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setBindingGame",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setFreeSpaces",
    values: [[BigNumberish, BigNumberish][]]
  ): string;
  encodeFunctionData(
    functionFragment: "setLines",
    values: [[BigNumberish, BigNumberish][][]]
  ): string;
  encodeFunctionData(
    functionFragment: "setRestrictions",
    values: [[BigNumberish, BigNumberish][][]]
  ): string;
  encodeFunctionData(
    functionFragment: "verifySigner",
    values: [BigNumberish, BytesLike, BigNumberish[][], AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "_decodeMarkedSpacesBySettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addMinter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bindCardGame",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateMatchedLineCounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "columns", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decodeCardNumbers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decodeMarkedSpaces",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decodeSelectedNumbers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "editUnplayedCard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encodeCardNumbers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encodeMarkedSpaces",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encodeSelectedNumbers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateMatchedLines",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "freeSpaces", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCardGame",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCardNumbers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lines", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "matchedLines",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeMinter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "restrictions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reveal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rows", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBindingGame",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFreeSpaces",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setLines", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRestrictions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifySigner",
    data: BytesLike
  ): Result;
}

export namespace RevealedEvent {
  export type InputTuple = [
    cardId: BigNumberish,
    revealer: AddressLike,
    signer: AddressLike,
    numbers: BigNumberish[][]
  ];
  export type OutputTuple = [
    cardId: bigint,
    revealer: string,
    signer: string,
    numbers: bigint[][]
  ];
  export interface OutputObject {
    cardId: bigint;
    revealer: string;
    signer: string;
    numbers: bigint[][];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BingoCard extends BaseContract {
  connect(runner?: ContractRunner | null): BingoCard;
  waitForDeployment(): Promise<this>;

  interface: BingoCardInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  _decodeMarkedSpacesBySettings: TypedContractMethod<
    [
      encodedMarkedSpaces: BigNumberish,
      gridRows: BigNumberish,
      gridColumns: BigNumberish
    ],
    [[bigint, bigint][]],
    "view"
  >;

  addMinter: TypedContractMethod<[minter: AddressLike], [void], "nonpayable">;

  bindCardGame: TypedContractMethod<
    [cardId: BigNumberish, gameContract: AddressLike, gameId: BigNumberish],
    [void],
    "nonpayable"
  >;

  calculateMatchedLineCounts: TypedContractMethod<
    [cardNumbers: BigNumberish[][], selectedNumbers: BigNumberish],
    [bigint],
    "view"
  >;

  columns: TypedContractMethod<[], [bigint], "view">;

  decodeCardNumbers: TypedContractMethod<
    [encodedCardNumbers: BytesLike],
    [bigint[][]],
    "view"
  >;

  decodeMarkedSpaces: TypedContractMethod<
    [encodedMarkedSpaces: BigNumberish],
    [[bigint, bigint][]],
    "view"
  >;

  decodeSelectedNumbers: TypedContractMethod<
    [encoded: BigNumberish],
    [bigint[]],
    "view"
  >;

  editUnplayedCard: TypedContractMethod<
    [cardId: BigNumberish, encryptedContent: BytesLike],
    [void],
    "nonpayable"
  >;

  encodeCardNumbers: TypedContractMethod<
    [cardNumbers: BigNumberish[][]],
    [string],
    "view"
  >;

  encodeMarkedSpaces: TypedContractMethod<
    [markedSpaces: [BigNumberish, BigNumberish][]],
    [bigint],
    "view"
  >;

  encodeSelectedNumbers: TypedContractMethod<
    [selectedNumbers: BigNumberish[]],
    [bigint],
    "view"
  >;

  estimateMatchedLines: TypedContractMethod<
    [cardNumbers: BigNumberish[][], selectedNumbers: BigNumberish[]],
    [bigint],
    "view"
  >;

  freeSpaces: TypedContractMethod<[], [[bigint, bigint][]], "view">;

  getCardGame: TypedContractMethod<
    [cardId: BigNumberish],
    [[string, bigint] & { gameContract: string; gameId: bigint }],
    "view"
  >;

  getCardNumbers: TypedContractMethod<
    [cardId: BigNumberish],
    [bigint[][]],
    "view"
  >;

  lines: TypedContractMethod<[], [[bigint, bigint][][]], "view">;

  matchedLines: TypedContractMethod<[cardId: BigNumberish], [bigint], "view">;

  mint: TypedContractMethod<
    [to: AddressLike, gameId: BigNumberish, encryptedContent: BytesLike],
    [bigint],
    "nonpayable"
  >;

  removeMinter: TypedContractMethod<
    [minter: AddressLike],
    [void],
    "nonpayable"
  >;

  restrictions: TypedContractMethod<[], [[bigint, bigint][][]], "view">;

  reveal: TypedContractMethod<
    [
      cardId: BigNumberish,
      gameLabel: BytesLike,
      signedGameLabel: BytesLike,
      cardNumbers: BigNumberish[][]
    ],
    [void],
    "nonpayable"
  >;

  rows: TypedContractMethod<[], [bigint], "view">;

  setBindingGame: TypedContractMethod<
    [gameAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  setFreeSpaces: TypedContractMethod<
    [freeSpacePositions: [BigNumberish, BigNumberish][]],
    [void],
    "nonpayable"
  >;

  setLines: TypedContractMethod<
    [validLines: [BigNumberish, BigNumberish][][]],
    [void],
    "nonpayable"
  >;

  setRestrictions: TypedContractMethod<
    [spaceNumberRestrictions: [BigNumberish, BigNumberish][][]],
    [void],
    "nonpayable"
  >;

  verifySigner: TypedContractMethod<
    [
      cardId: BigNumberish,
      salt: BytesLike,
      cardNumbers: BigNumberish[][],
      signer: AddressLike
    ],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "_decodeMarkedSpacesBySettings"
  ): TypedContractMethod<
    [
      encodedMarkedSpaces: BigNumberish,
      gridRows: BigNumberish,
      gridColumns: BigNumberish
    ],
    [[bigint, bigint][]],
    "view"
  >;
  getFunction(
    nameOrSignature: "addMinter"
  ): TypedContractMethod<[minter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "bindCardGame"
  ): TypedContractMethod<
    [cardId: BigNumberish, gameContract: AddressLike, gameId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "calculateMatchedLineCounts"
  ): TypedContractMethod<
    [cardNumbers: BigNumberish[][], selectedNumbers: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "columns"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decodeCardNumbers"
  ): TypedContractMethod<[encodedCardNumbers: BytesLike], [bigint[][]], "view">;
  getFunction(
    nameOrSignature: "decodeMarkedSpaces"
  ): TypedContractMethod<
    [encodedMarkedSpaces: BigNumberish],
    [[bigint, bigint][]],
    "view"
  >;
  getFunction(
    nameOrSignature: "decodeSelectedNumbers"
  ): TypedContractMethod<[encoded: BigNumberish], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "editUnplayedCard"
  ): TypedContractMethod<
    [cardId: BigNumberish, encryptedContent: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "encodeCardNumbers"
  ): TypedContractMethod<[cardNumbers: BigNumberish[][]], [string], "view">;
  getFunction(
    nameOrSignature: "encodeMarkedSpaces"
  ): TypedContractMethod<
    [markedSpaces: [BigNumberish, BigNumberish][]],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "encodeSelectedNumbers"
  ): TypedContractMethod<[selectedNumbers: BigNumberish[]], [bigint], "view">;
  getFunction(
    nameOrSignature: "estimateMatchedLines"
  ): TypedContractMethod<
    [cardNumbers: BigNumberish[][], selectedNumbers: BigNumberish[]],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "freeSpaces"
  ): TypedContractMethod<[], [[bigint, bigint][]], "view">;
  getFunction(
    nameOrSignature: "getCardGame"
  ): TypedContractMethod<
    [cardId: BigNumberish],
    [[string, bigint] & { gameContract: string; gameId: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCardNumbers"
  ): TypedContractMethod<[cardId: BigNumberish], [bigint[][]], "view">;
  getFunction(
    nameOrSignature: "lines"
  ): TypedContractMethod<[], [[bigint, bigint][][]], "view">;
  getFunction(
    nameOrSignature: "matchedLines"
  ): TypedContractMethod<[cardId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<
    [to: AddressLike, gameId: BigNumberish, encryptedContent: BytesLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeMinter"
  ): TypedContractMethod<[minter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "restrictions"
  ): TypedContractMethod<[], [[bigint, bigint][][]], "view">;
  getFunction(
    nameOrSignature: "reveal"
  ): TypedContractMethod<
    [
      cardId: BigNumberish,
      gameLabel: BytesLike,
      signedGameLabel: BytesLike,
      cardNumbers: BigNumberish[][]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rows"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setBindingGame"
  ): TypedContractMethod<[gameAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFreeSpaces"
  ): TypedContractMethod<
    [freeSpacePositions: [BigNumberish, BigNumberish][]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setLines"
  ): TypedContractMethod<
    [validLines: [BigNumberish, BigNumberish][][]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setRestrictions"
  ): TypedContractMethod<
    [spaceNumberRestrictions: [BigNumberish, BigNumberish][][]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "verifySigner"
  ): TypedContractMethod<
    [
      cardId: BigNumberish,
      salt: BytesLike,
      cardNumbers: BigNumberish[][],
      signer: AddressLike
    ],
    [boolean],
    "view"
  >;

  getEvent(
    key: "Revealed"
  ): TypedContractEvent<
    RevealedEvent.InputTuple,
    RevealedEvent.OutputTuple,
    RevealedEvent.OutputObject
  >;

  filters: {
    "Revealed(uint256,address,address,uint8[][])": TypedContractEvent<
      RevealedEvent.InputTuple,
      RevealedEvent.OutputTuple,
      RevealedEvent.OutputObject
    >;
    Revealed: TypedContractEvent<
      RevealedEvent.InputTuple,
      RevealedEvent.OutputTuple,
      RevealedEvent.OutputObject
    >;
  };
}
