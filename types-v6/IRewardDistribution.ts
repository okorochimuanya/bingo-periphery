/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  FunctionFragment,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "./common";

export interface IRewardDistributionInterface extends Interface {
  getEvent(
    nameOrSignatureOrTopic: "NewReward" | "RewardDistributed"
  ): EventFragment;
}

export namespace NewRewardEvent {
  export type InputTuple = [
    newReward: AddressLike,
    newRewardStartId: BigNumberish,
    oldReward: AddressLike,
    oldRewardDistributed: BigNumberish
  ];
  export type OutputTuple = [
    newReward: string,
    newRewardStartId: bigint,
    oldReward: string,
    oldRewardDistributed: bigint
  ];
  export interface OutputObject {
    newReward: string;
    newRewardStartId: bigint;
    oldReward: string;
    oldRewardDistributed: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardDistributedEvent {
  export type InputTuple = [
    reward: AddressLike,
    id: BigNumberish,
    to: AddressLike
  ];
  export type OutputTuple = [reward: string, id: bigint, to: string];
  export interface OutputObject {
    reward: string;
    id: bigint;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IRewardDistribution extends BaseContract {
  connect(runner?: ContractRunner | null): IRewardDistribution;
  waitForDeployment(): Promise<this>;

  interface: IRewardDistributionInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "NewReward"
  ): TypedContractEvent<
    NewRewardEvent.InputTuple,
    NewRewardEvent.OutputTuple,
    NewRewardEvent.OutputObject
  >;
  getEvent(
    key: "RewardDistributed"
  ): TypedContractEvent<
    RewardDistributedEvent.InputTuple,
    RewardDistributedEvent.OutputTuple,
    RewardDistributedEvent.OutputObject
  >;

  filters: {
    "NewReward(address,uint256,address,uint256)": TypedContractEvent<
      NewRewardEvent.InputTuple,
      NewRewardEvent.OutputTuple,
      NewRewardEvent.OutputObject
    >;
    NewReward: TypedContractEvent<
      NewRewardEvent.InputTuple,
      NewRewardEvent.OutputTuple,
      NewRewardEvent.OutputObject
    >;

    "RewardDistributed(address,uint256,address)": TypedContractEvent<
      RewardDistributedEvent.InputTuple,
      RewardDistributedEvent.OutputTuple,
      RewardDistributedEvent.OutputObject
    >;
    RewardDistributed: TypedContractEvent<
      RewardDistributedEvent.InputTuple,
      RewardDistributedEvent.OutputTuple,
      RewardDistributedEvent.OutputObject
    >;
  };
}
